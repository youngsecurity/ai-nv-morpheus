{
    "extensions": {
        // See https://go.microsoft.com/fwlink/?LinkId=827846 to learn about workspace recommendations.
        // Extension identifier format: ${publisher}.${name}. Example: vscode.csharp
        // List of extensions which should be recommended for users of this workspace.
        "recommendations": [
            "eeyore.yapf",
            "josetr.cmake-language-support-vscode",
            "llvm-vs-code-extensions.vscode-clangd",
            "matepek.vscode-catch2-test-adapter",
            "ms-python.flake8",
            "ms-python.isort",
            "ms-python.pylint",
            "ms-vscode.cmake-tools",
            "stkb.rewrap"
        ],
        // List of extensions recommended by VS Code that should not be recommended for users of this workspace.
        "unwantedRecommendations": [
            "austin.code-gnu-global"
        ]
    },
    "folders": [
        {
            "path": "."
        }
    ],
    "launch": {
        "compounds": [],
        "configurations": [
            {
                "args": [
                    "--log_level=DEBUG",
                    // "--debug",
                    "run",
                    "--num_threads=8",
                    "--pipeline_batch_size=1024",
                    "--model_max_batch_size=32",
                    "--edge_buffer_size=4",
                    "--use_cpp=False",
                    "pipeline-nlp",
                    "--model_seq_length=256",
                    "from-file",
                    "--filename=models/datasets/validation-data/sid-validation-data.csv",
                    "--repeat=50",
                    // "dropna",
                    // "from-kafka",
                    "deserialize",
                    "preprocess",
                    "--vocab_hash_file=./morpheus/data/bert-base-uncased-hash.txt",
                    "--truncation=True",
                    "--do_lower_case=True",
                    "--add_special_tokens=False",
                    "inf-triton",
                    "--model_name=sid-minibert-onnx",
                    "--server_url=localhost:8001",
                    "--force_convert_inputs=True",
                    // "--use_shared_memory=True",
                    "monitor",
                    "--description",
                    "Inference Rate",
                    "--unit",
                    "inf",
                    "add-class",
                    // "filter",
                    "serialize",
                    // "--include",
                    // "timestamp",
                    "--exclude",
                    "^_ts_",
                    "--output_type=json",
                    // "to-kafka",
                    // "--output_topic",
                    // "inference_output",
                    "to-file",
                    "--filename=./.tmp/sid_training_data-nlp.csv",
                    "--overwrite"
                ],
                "console": "integratedTerminal",
                "cwd": "${workspaceFolder}",
                "justMyCode": false,
                "name": "Python: Run Pipeline (NLP)",
                "program": "${workspaceFolder}/morpheus/cli/run.py",
                "request": "launch",
                "subProcess": true,
                "type": "debugpy"
            },
            {
                "args": [
                    "--log_level=DEBUG",
                    // "--debug",
                    "run",
                    "--num_threads=8",
                    "--pipeline_batch_size=1024",
                    "--model_max_batch_size=1024",
                    // "--use_cpp=False",
                    "pipeline-fil",
                    "from-file",
                    "--filename=./models/datasets/validation-data/abp-validation-data.jsonlines",
                    "--repeat=200",
                    // "from-kafka",
                    // "dropna",
                    "deserialize",
                    "preprocess",
                    "inf-triton",
                    "--model_name=abp-nvsmi-xgb",
                    "--server_url=localhost:8001",
                    "--force_convert_inputs=True",
                    "monitor",
                    "--description",
                    "Inference Rate",
                    "--smoothing=0.001",
                    "--unit",
                    "inf",
                    "add-class",
                    // "validate",
                    // "--val_file_name=models/datasets/validation-data/abp-validation-data.jsonlines",
                    // "--results_file_name=./.tmp/validation_results-fil.json",
                    // "--overwrite",
                    "filter",
                    "serialize",
                    "--include",
                    "timestamp",
                    "--exclude",
                    "^_ts_",
                    "--exclude",
                    "^nvidia_smi_log",
                    // "to-kafka",
                    // "--output_topic",
                    // "inference_output",
                    "to-file",
                    "--filename=./.tmp/abp-validation-data.csv",
                    "--overwrite"
                ],
                "console": "integratedTerminal",
                "cwd": "${workspaceFolder}",
                "justMyCode": false,
                "name": "Python: Run Pipeline (FIL)",
                "program": "${workspaceFolder}/morpheus/cli/run.py",
                "request": "launch",
                "subProcess": true,
                "type": "debugpy"
            },
            {
                "args": [
                    "--log_level=DEBUG",
                    "run",
                    "--num_threads=1",
                    "--pipeline_batch_size=1024",
                    "--model_max_batch_size=1024",
                    "--use_cpp=False",
                    "pipeline-ae",
                    "--columns_file=morpheus/data/columns_ae_cloudtrail.txt",
                    "--userid_column_name=userIdentitysessionContextsessionIssueruserName",
                    "--userid_filter=user123",
                    "--timestamp_column_name=event_dt",
                    "from-cloudtrail",
                    "--input_glob=models/datasets/validation-data/dfp-cloudtrail-*-input.csv",
                    "--max_files=200",
                    "train-ae",
                    "--train_data_glob=models/datasets/training-data/dfp-*.csv",
                    "--source_stage_class=morpheus.stages.input.cloud_trail_source_stage.CloudTrailSourceStage",
                    "--seed=42",
                    "preprocess",
                    "inf-pytorch",
                    "add-scores",
                    "timeseries",
                    "--resolution=1m",
                    "--zscore_threshold=8.0",
                    "--hot_start",
                    "monitor",
                    "--description",
                    "Inference Rate",
                    "--unit",
                    "inf",
                    "validate",
                    "--val_file_name=models/datasets/validation-data/dfp-cloudtrail-user123-validation-data-output.csv",
                    "--results_file_name=./.tmp/validation_results-ae.json",
                    "--index_col=_index_",
                    "--exclude=event_dt",
                    "--rel_tol=0.1",
                    "--overwrite",
                    "serialize",
                    // "--include",
                    // "timestamp",
                    // "--exclude",
                    // "^_ts_",
                    // "--exclude",
                    // "^nvidia_smi_log",
                    // "to-kafka",
                    // "--output_topic",
                    // "inference_output",
                    "to-file",
                    "--filename=./.tmp/detections.csv",
                    "--overwrite"
                ],
                "console": "integratedTerminal",
                "cwd": "${workspaceFolder}",
                "justMyCode": false,
                "name": "Python: Run Pipeline (AE)",
                "program": "${workspaceFolder}/morpheus/cli/run.py",
                "request": "launch",
                "subProcess": true,
                "type": "debugpy"
            },
            {
                "args": [
                    "--log_level=DEBUG",
                    // "--debug",
                    "run",
                    "--num_threads=1",
                    "--pipeline_batch_size=1024",
                    "--model_max_batch_size=32",
                    // "--use_cpp=False",
                    "pipeline-nlp",
                    "--labels_file=morpheus/data/labels_phishing.txt",
                    "--model_seq_length=128",
                    "from-file",
                    "--filename=models/datasets/validation-data/phishing-email-validation-data.jsonlines",
                    "--repeat=1",
                    // "dropna",
                    // "from-kafka",
                    "deserialize",
                    "preprocess",
                    "--vocab_hash_file=./morpheus/data/bert-base-uncased-hash.txt",
                    "--truncation=True",
                    // "--stride=",
                    "--do_lower_case=True",
                    "--add_special_tokens=False",
                    "inf-triton",
                    "--model_name=phishing-bert-onnx",
                    "--server_url=localhost:8001",
                    "--force_convert_inputs=True",
                    // "--use_shared_memory=True",
                    "monitor",
                    "--description",
                    "Inference Rate",
                    "--unit",
                    "inf",
                    "add-class",
                    // "--label=pred",
                    // "--threshold=0.7",
                    // "add-scores",
                    // "--label=score",
                    // "filter",
                    "validate",
                    "--val_file_name=models/datasets/validation-data/phishing-email-validation-data.jsonlines",
                    "--results_file_name=./.tmp/validation_results-phishing.json",
                    "--overwrite",
                    "serialize",
                    // "--include",
                    // "timestamp",
                    "--exclude",
                    "^ts_",
                    // "to-kafka",
                    // "--output_topic",
                    // "inference_output",
                    "to-file",
                    "--filename=./.tmp/phishing-detections.jsonlines",
                    "--overwrite"
                ],
                "console": "integratedTerminal",
                "cwd": "${workspaceFolder}",
                "justMyCode": false,
                "name": "Python: Run Pipeline (NLP-Phishing)",
                "program": "${workspaceFolder}/morpheus/cli/run.py",
                "request": "launch",
                "subProcess": true,
                "type": "debugpy"
            },
            {
                "args": [
                    "--input_file",
                    "../data/pcap_dump.jsonlines",
                    "--output_file",
                    "./.tmp/pcap_output.jsonlines",
                    "--server_url",
                    "localhost:8001",
                    "--model_name",
                    "abp-pcap-xgb"
                ],
                "console": "integratedTerminal",
                "cwd": "${workspaceFolder}/examples/abp_pcap_detection",
                "justMyCode": false,
                "name": "Python: Anomaly Detection Example",
                "program": "${workspaceFolder}/examples/abp_pcap_detection/run.py",
                "request": "launch",
                "type": "debugpy"
            },
            {
                "args": [
                    "-b",
                    "html",
                    "-aE",
                    "-j",
                    "auto",
                    "source",
                    "${workspaceFolder}/build/docs/html"
                ],
                "console": "integratedTerminal",
                "cwd": "${workspaceFolder}/docs",
                "justMyCode": false,
                "module": "sphinx.cmd.build",
                "name": "Python: Sphinx",
                "request": "launch",
                "type": "debugpy"
            },
            {
                "MIMode": "gdb",
                "args": [
                    "./morpheus/cli.py",
                    "--log_level=DEBUG",
                    "run",
                    "--num_threads=2",
                    "--pipeline_batch_size=1024",
                    "--model_max_batch_size=32",
                    "--edge_buffer_size=4",
                    "--use_cpp=True",
                    "pipeline-nlp",
                    "--model_seq_length=256",
                    // "--viz_file=.tmp/nlp-viz.png",
                    "from-file",
                    "--filename=models/datasets/validation-data/sid-validation-data.csv",
                    "--repeat=5",
                    //  "--iterative",
                    // "from-kafka",
                    "deserialize",
                    "preprocess",
                    "--vocab_hash_file=./morpheus/data/bert-base-uncased-hash.txt",
                    "--truncation=True",
                    "--do_lower_case=True",
                    "--add_special_tokens=False",
                    "inf-triton",
                    "--model_name=sid-minibert-onnx",
                    "--server_url=localhost:8001",
                    "--force_convert_inputs=True",
                    "monitor",
                    "--description",
                    "Inference Rate",
                    "--unit",
                    "inf",
                    "add-class",
                    // "filter",
                    "serialize",
                    // "--include",
                    // "timestamp",
                    "--exclude",
                    "^_ts_",
                    // "to-kafka",
                    // "--output_topic",
                    // "inference_output",
                    "to-file",
                    "--filename=./.tmp/detections2-nlp.csv",
                    "--overwrite"
                ],
                "cwd": "${workspaceFolder}",
                "environment": [
                    {
                        "name": "MORPHEUS_ROOT",
                        "value": "${workspaceFolder}"
                    },
                    {
                        "name": "GLOG_v",
                        "value": "10"
                    },
                    {
                        "name": "GLOG_logtostderr",
                        "value": "1"
                    },
                    {
                        "name": "CUDA_LAUNCH_BLOCKING",
                        "value": "1"
                    }
                ],
                "externalConsole": false,
                "miDebuggerPath": "gdb",
                "name": "Debug MRC from Python (Morpheus-NLP)",
                "program": "python",
                "request": "launch",
                "setupCommands": [
                    {
                        "description": "Enable pretty-printing for gdb",
                        "ignoreFailures": true,
                        "text": "-enable-pretty-printing"
                    },
                    {
                        "description": "Skip stdio-common files",
                        "text": "-interpreter-exec console \"skip -gfi **/bits/*.h\""
                    }
                ],
                "sourceFileMap": {
                    "${workspaceFolder}": {
                        "editorPath": "${workspaceFolder}",
                        "useForBreakpoints": "true"
                    }
                },
                "stopAtEntry": false,
                "symbolLoadInfo": {
                    "exceptionList": "libmrc*.so;cudf_helpers.*;executor.*;morpheus.*;node.*;options.*;pipeline.*;segment.*;subscriber.*;stages.*;messages.*;common*.so",
                    "loadAll": false
                },
                "type": "cppdbg"
            },
            {
                "MIMode": "gdb",
                "args": [
                    "./morpheus/cli.py",
                    "--log_level=DEBUG",
                    // "--debug",
                    "run",
                    "--num_threads=1",
                    "--pipeline_batch_size=1024",
                    "--model_max_batch_size=1024",
                    // "--use_cpp=False",
                    "pipeline-fil",
                    "from-file",
                    "--filename=models/datasets/validation-data/abp-validation-data.csv",
                    "--repeat=10",
                    "--iterative",
                    // "from-kafka",
                    // "dropna",
                    "deserialize",
                    "preprocess",
                    "inf-triton",
                    "--model_name=abp-nvsmi-xgb",
                    "--server_url=localhost:8001",
                    "--force_convert_inputs=True",
                    "monitor",
                    "--description",
                    "Inference Rate",
                    "--unit",
                    "inf",
                    "add-class",
                    "validate",
                    "--val_file_name=models/datasets/validation-data/abp-validation-data.jsonlines",
                    "--results_file_name=./.tmp/validation_results-fil.json",
                    "--overwrite",
                    // "filter",
                    "serialize",
                    // "--include",
                    // "timestamp",
                    "--exclude",
                    "^_ts_",
                    // "--exclude",
                    // "^nvidia_smi_log",
                    // "to-kafka",
                    // "--output_topic",
                    // "inference_output",
                    "to-file",
                    "--filename=./.tmp/abp-validation-data.csv",
                    "--overwrite"
                ],
                "cwd": "${workspaceFolder}",
                "environment": [
                    {
                        "name": "MORPHEUS_ROOT",
                        "value": "${workspaceFolder}"
                    },
                    {
                        "name": "GLOG_v",
                        "value": "10"
                    },
                    {
                        "name": "CUDA_LAUNCH_BLOCKING",
                        "value": "1"
                    }
                ],
                "externalConsole": false,
                "miDebuggerPath": "gdb",
                "name": "Debug MRC from Python (Morpheus-FIL)",
                "program": "python",
                "request": "launch",
                "setupCommands": [
                    {
                        "description": "Enable pretty-printing for gdb",
                        "ignoreFailures": true,
                        "text": "-enable-pretty-printing"
                    },
                    {
                        "description": "Skip stdio-common files",
                        "text": "-interpreter-exec console \"skip -gfi **/bits/*.h\""
                    }
                ],
                "sourceFileMap": {
                    "${workspaceFolder}": {
                        "editorPath": "${workspaceFolder}",
                        "useForBreakpoints": "true"
                    }
                },
                "stopAtEntry": false,
                "symbolLoadInfo": {
                    "exceptionList": "libmrc*.so;cudf_helpers.*;executor.*;morpheus.*;node.*;options.*;pipeline.*;segment.*;subscriber.*;stages.*;messages.*;common*.so",
                    "loadAll": false
                },
                "type": "cppdbg"
            },
            {
                "MIMode": "gdb",
                "args": [
                    "./morpheus/cli.py",
                    "--log_level=DEBUG",
                    "run",
                    "--num_threads=1",
                    "--pipeline_batch_size=128",
                    "--model_max_batch_size=128",
                    "--use_cpp=False",
                    "pipeline-ae",
                    // "--ae_path=models/hammah-models/hammah-role-g-20211017.pkl",
                    "--ae_path=../data/ae_model.pkl",
                    "from-cloudtrail",
                    "--input_glob=models/datasets/validation-data/dfp-cloudtrail-role-g-validation-data.csv",
                    // "--input_glob=./data/red_team.csv",
                    "--max_files=200",
                    "--iterative",
                    "deserialize",
                    "preprocess",
                    "inf-triton",
                    "--model_name=autoencoder-onnx",
                    "--server_url=localhost:8001",
                    "timeseries",
                    "--resolution=10m",
                    "monitor",
                    "--description",
                    "Inference Rate",
                    "--smoothing=0.001",
                    "--unit",
                    "inf"
                    // "add-class",
                    // "filter",
                    // "serialize",
                    // "--include",
                    // "timestamp",
                    // "--exclude",
                    // "^_ts_",
                    // "--exclude",
                    // "^nvidia_smi_log",
                    // "to-kafka",
                    // "--output_topic",
                    // "inference_output",
                    // "to-file",
                    // "--filename=./.tmp/detections.json",
                    // "--overwrite",
                ],
                "cwd": "${workspaceFolder}",
                "environment": [
                    {
                        "name": "MORPHEUS_ROOT",
                        "value": "${workspaceFolder}"
                    },
                    {
                        "name": "GLOG_v",
                        "value": "10"
                    },
                    {
                        "name": "CUDA_LAUNCH_BLOCKING",
                        "value": "1"
                    }
                ],
                "externalConsole": false,
                "miDebuggerPath": "gdb",
                "name": "Debug MRC from Python (Morpheus-AE)",
                "program": "python",
                "request": "launch",
                "setupCommands": [
                    {
                        "description": "Enable pretty-printing for gdb",
                        "ignoreFailures": true,
                        "text": "-enable-pretty-printing"
                    },
                    {
                        "description": "Skip stdio-common files",
                        "text": "-interpreter-exec console \"skip -gfi **/bits/*.h\""
                    }
                ],
                "sourceFileMap": {
                    "${workspaceFolder}": {
                        "editorPath": "${workspaceFolder}",
                        "useForBreakpoints": "true"
                    }
                },
                "stopAtEntry": false,
                "symbolLoadInfo": {
                    "exceptionList": "libmrc*.so;cudf_helpers.*;executor.*;morpheus.*;node.*;options.*;pipeline.*;segment.*;subscriber.*;stages.*;messages.*;common*.so",
                    "loadAll": false
                },
                "type": "cppdbg"
            },
            {
                "args": [
                    "--input_file=validation.csv",
                    "--training_file=training.csv",
                    "--output_file=result.csv",
                    "--model_dir=model"
                ],
                "console": "integratedTerminal",
                "cwd": "${workspaceFolder}/examples/gnn_fraud_detection_pipeline",
                "justMyCode": false,
                "name": "Python: GNN DGL inference",
                "program": "${workspaceFolder}/examples/gnn_fraud_detection_pipeline/run.py",
                "request": "launch",
                "type": "debugpy"
            },
            {
                "args": [
                    "--training-data=${workspaceFolder}/examples/gnn_fraud_detection_pipeline/training.csv",
                    "--validation-data=${workspaceFolder}/examples/gnn_fraud_detection_pipeline/validation.csv",
                    "--output-file=result.csv",
                    "--model-dir=models",
                    "--epochs=5"
                ],
                "console": "integratedTerminal",
                "cwd": "${workspaceFolder}/models/training-tuning-scripts/fraud-detection-models",
                "justMyCode": false,
                "name": "Python: GNN model training",
                "program": "${workspaceFolder}/models/training-tuning-scripts/fraud-detection-models/training.py",
                "request": "launch",
                "type": "debugpy"
            }
        ]
    },
    "settings": {
        "[cpp]": {
            "editor.defaultFormatter": "llvm-vs-code-extensions.vscode-clangd",
            "editor.detectIndentation": false,
            "editor.formatOnSave": true,
            "editor.semanticHighlighting.enabled": true,
            "editor.suggest.insertMode": "replace",
            "editor.tabSize": 4,
            "editor.wordBasedSuggestions": "off",
            "editor.wordWrapColumn": 120
        },
        "[python]": {
            "editor.codeActionsOnSave": {
                "source.organizeImports": "explicit"
            },
            "editor.defaultFormatter": "eeyore.yapf",
            "editor.formatOnSave": true,
            "editor.tabSize": 4
        },
        "cmake.configureArgs": [
            "-DCMAKE_MESSAGE_CONTEXT_SHOW=ON", // Show message context by default
            "-DMORPHEUS_USE_CLANG_TIDY=OFF", // If we are using clangd extension, disable clang-tidy in VS Code to prevent double errors
            "-DMORPHEUS_PYTHON_INPLACE_BUILD=ON", // Allow inplace build for python. Use `pip install -e .` from the python folder to install
            "-DMORPHEUS_USE_CCACHE=ON" // Enable ccache when building in vscode
        ],
        "cmake.format.allowOptionalArgumentIndentation": true,
        "docker.languageserver.formatter.ignoreMultilineInstructions": true,
        "editor.rulers": [
            120
        ],
        "files.insertFinalNewline": true,
        "files.trimFinalNewlines": true,
        "files.trimTrailingWhitespace": true,
        "flake8.args": [
            "--style=${workspaceFolder}/setup.cfg"
        ],
        "pylint.args": [
            "--rcfile=${workspaceFolder}/pyproject.toml",
            "--init-hook=import sys; sys.path.append(\"${workspaceFolder}\")"
        ],
        "pylint.importStrategy": "fromEnvironment",
        "python.analysis.extraPaths": [
            "./examples/digital_fingerprinting/production/morpheus"
        ],
        "python.testing.pytestArgs": [
            "-s",
            "tests"
        ],
        "python.testing.pytestEnabled": true,
        "python.testing.unittestEnabled": false,
        "rewrap.wrappingColumn": 120,
        "testMate.cpp.test.advancedExecutables": [
            {
                "pattern": "{build,Build,BUILD,out,Out,OUT}/**/*{test,Test,TEST}_*.x",
                "env": {
                    "UCX_ERROR_SIGNALS": "", // Prevent UCX from capturing errors
                    "MORPHEUS_ROOT": "${workspaceFolder}", // Ensure the MORPHEUS_ROOT is set
                }
            }
        ],
        "testMate.cpp.debug.configTemplate": {
            "args": "${argsArray}",
            "cwd": "${cwd}",
            "darwin": {
                "MIMode": "lldb",
                "type": "cppdbg"
            },
            "env": "${envObj}",
            "environment": "${envObjArray}",
            "name": "Debug Test Runner (${parentLabel} > ${label})",
            "program": "${exec}",
            "request": "launch",
            "testMate.cpp.debug.setEnv": {
                "GLOG_v": "10",
                "GTEST_CATCH_EXCEPTIONS": "0", // Allow the debugger to catch exceptions
                "MORPHEUS_ROOT": "${workspaceFolder}", // Ensure the MORPHEUS_ROOT is set
                "UCX_ERROR_SIGNALS": "" // Prevent UCX from capturing errors
            },
            "type": "lldb",
            "win32": {
                "type": "cppvsdbg"
            }
        },
        "yapf.args": [
            "--style=${workspaceFolder}/setup.cfg"
        ]
    }
}
